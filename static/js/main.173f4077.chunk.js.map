{"version":3,"sources":["domain/model/Complement.ts","domain/model/Determiner.ts","domain/model/PhraseFSM.ts","domain/model/Adjective.ts","domain/repository/AdjectiveRepository.ts","domain/model/Noun.ts","domain/repository/NounRepository.ts","domain/service/GrammarStream.ts","domain/model/Decorator.ts","domain/service/StreamFormatter.ts","Generator.tsx","serviceWorker.ts","index.tsx"],"names":["Complement","value","options","OF_DARKNESS","OF_THE_NIGHT","randomInt","Math","floor","random","length","this","Determiner","MY","ONE","SOME","THAT","THE","THIS","YOUR","PhraseFSM","state","STATE_START","selectStateFrom","STATE_1_DETERMINER","STATE_2_ADJECTIVE","STATE_3_NOUN","STATE_4_COMPLEMENT","STATE_FINISH","stateOpts","Adjective","AdjectiveRepository","adjectives","wordsJson","Object","keys","rand","parseNouns","Noun","NounRepository","nouns","GrammarStream","stream","fsm","currentState","next","push","getOne","Array","from","Decorator","undecoratedString","decisionMatrix","randDecorator","getDecorator","split","reverse","join","startDecorators","StreamFormatter","decorateString","toUndecoratedString","reduce","prev","current","trim","Generator","useState","userName","setUserName","className","styles","form","style","display","htmlFor","formUsername","id","placeholder","readOnly","formSubmit","onClick","e","preventDefault","streamFormatter","toDecoratedString","type","stylesheet","flexDirection","justifyContent","maxWidth","padding","textAlign","width","border","borderRadius","fontFamily","lineHeight","margin","backgroundColor","borderStyle","color","cursor","fontSize","fontWeight","letterSpacing","marginTop","transition","$nest","Boolean","window","location","hostname","match","pageHead","alignItems","pageContent","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.173f4077.chunk.js","sourcesContent":["import { GrammarObject } from \"./GrammarObject\";\n\nexport class Complement implements GrammarObject {\n  public readonly value: string;\n\n  private static readonly OF_DARKNESS = \"of darkness\";\n\n  private static readonly OF_THE_NIGHT = \"of the night\";\n\n  // TODO add more\n\n  public constructor() {\n    const options = [Complement.OF_DARKNESS, Complement.OF_THE_NIGHT];\n\n    const randomInt = Math.floor(Math.random() * options.length); // TODO via Repository\n\n    this.value = options[randomInt];\n  }\n}\n","import { GrammarObject } from \"./GrammarObject\";\n\nexport class Determiner implements GrammarObject {\n  public readonly value: string;\n\n  // private static readonly A = 'a'; // TODO as a(n)\n\n  private static readonly MY = \"my\";\n\n  private static readonly ONE = \"one\";\n\n  private static readonly SOME = \"some\";\n\n  private static readonly THAT = \"that\";\n\n  private static readonly THE = \"the\";\n\n  private static readonly THIS = \"this\";\n\n  private static readonly YOUR = \"your\";\n\n  public constructor() {\n    const options = [\n      // Determiner.A, // TODO as a(n)\n      Determiner.MY,\n      Determiner.ONE,\n      Determiner.SOME,\n      Determiner.THAT,\n      Determiner.THE,\n      Determiner.THIS,\n      Determiner.YOUR,\n    ];\n\n    const randomInt = Math.floor(Math.random() * options.length); // TODO via Repository\n\n    this.value = options[randomInt];\n  }\n}\n","export class PhraseFSM {\n  public static readonly STATE_START = \"START\";\n\n  public static readonly STATE_1_DETERMINER = \"1_DETERMINER\";\n\n  public static readonly STATE_2_ADJECTIVE = \"2_ADJECTIVE\";\n\n  public static readonly STATE_3_NOUN = \"3_NOUN\";\n\n  public static readonly STATE_4_COMPLEMENT = \"4_COMPLEMENT\";\n\n  public static readonly STATE_FINISH = \"FINISH\";\n\n  private state: string;\n\n  public constructor() {\n    this.state = PhraseFSM.STATE_START;\n  }\n\n  public next(): PhraseFSM {\n    switch (this.state) {\n      case PhraseFSM.STATE_START:\n        this.state = PhraseFSM.selectStateFrom([\n          PhraseFSM.STATE_1_DETERMINER,\n          PhraseFSM.STATE_2_ADJECTIVE,\n          PhraseFSM.STATE_3_NOUN,\n        ]);\n        break;\n\n      case PhraseFSM.STATE_1_DETERMINER:\n        this.state = PhraseFSM.selectStateFrom([\n          PhraseFSM.STATE_2_ADJECTIVE,\n          PhraseFSM.STATE_3_NOUN,\n        ]);\n        break;\n\n      case PhraseFSM.STATE_2_ADJECTIVE:\n        this.state = PhraseFSM.STATE_3_NOUN;\n        break;\n\n      case PhraseFSM.STATE_3_NOUN:\n        this.state = PhraseFSM.selectStateFrom([\n          PhraseFSM.STATE_4_COMPLEMENT,\n          PhraseFSM.STATE_FINISH,\n        ]);\n        break;\n\n      case PhraseFSM.STATE_4_COMPLEMENT:\n      default:\n        this.state = PhraseFSM.STATE_FINISH;\n    }\n\n    return this;\n  }\n\n  private static selectStateFrom(stateOpts: string[]): string {\n    const randomInt = Math.floor(Math.random() * stateOpts.length);\n    return stateOpts[randomInt];\n  }\n\n  public get currentState(): string {\n    return this.state;\n  }\n}\n","import { GrammarObject } from \"./GrammarObject\";\n\nexport class Adjective implements GrammarObject {\n  constructor(public readonly value: string) {}\n}\n","import wordsJson from \"../../data/words.json\";\nimport { Adjective } from \"../model/Adjective\";\n\nexport class AdjectiveRepository {\n  private static readonly adjectives: string[] = AdjectiveRepository.parseNouns();\n\n  private static parseNouns(): string[] {\n    const { adjectives } = wordsJson;\n    return Object.keys(adjectives);\n  }\n\n  public static getOne(): Adjective {\n    const rand = Math.floor(Math.random() * this.adjectives.length);\n    return new Adjective(this.adjectives[rand]);\n  }\n}\n","import { GrammarObject } from \"./GrammarObject\";\n\nexport class Noun implements GrammarObject {\n  constructor(public readonly value: string) {}\n}\n","import wordsJson from \"../../data/words.json\";\nimport { Noun } from \"../model/Noun\";\n\nexport class NounRepository {\n  private static readonly nouns: string[] = NounRepository.parseNouns();\n\n  private static parseNouns(): string[] {\n    const { nouns } = wordsJson;\n    return Object.keys(nouns);\n  }\n\n  public static getOne(): Noun {\n    const rand = Math.floor(Math.random() * this.nouns.length);\n    return new Noun(this.nouns[rand]);\n  }\n}\n","import { Complement } from \"../model/Complement\";\nimport { Determiner } from \"../model/Determiner\";\nimport { GrammarObject } from \"../model/GrammarObject\";\nimport { PhraseFSM } from \"../model/PhraseFSM\";\nimport { AdjectiveRepository } from \"../repository/AdjectiveRepository\";\nimport { NounRepository } from \"../repository/NounRepository\";\n\nexport class GrammarStream {\n  private stream: GrammarObject[];\n\n  public constructor() {\n    this.stream = [];\n\n    const fsm = new PhraseFSM();\n\n    do {\n      const { currentState } = fsm.next();\n      if (currentState === PhraseFSM.STATE_1_DETERMINER) {\n        this.stream.push(new Determiner());\n      } else if (currentState === PhraseFSM.STATE_2_ADJECTIVE) {\n        this.stream.push(AdjectiveRepository.getOne());\n      } else if (currentState === PhraseFSM.STATE_3_NOUN) {\n        this.stream.push(NounRepository.getOne());\n      } else if (currentState === PhraseFSM.STATE_4_COMPLEMENT) {\n        this.stream.push(new Complement());\n      }\n    } while (fsm.currentState !== PhraseFSM.STATE_FINISH);\n  }\n\n  public get value() {\n    return Array.from(this.stream); // provide a copy to maintain immutability\n  }\n}\n","export class Decorator {\n  private static readonly startDecorators: string[] = [\n    '~',\n    '~~',\n    '^',\n    '~*',\n    '_',\n    '__',\n    '==|',\n    '+',\n    '++',\n    '+++',\n  ];\n\n  public static decorateString(undecoratedString: string): string {\n    const START_STRING = 1;\n    const END_STRING = 1;\n    const END_NUMBER = 2;\n\n    const decisionMatrix = [\n      Math.floor(Math.random() * 2),\n      Math.floor(Math.random() * 3),\n    ];\n\n    if (decisionMatrix[0] === START_STRING) {\n      const randDecorator = Decorator.getDecorator();\n\n      // <DEC> string <DEC>\n      if (decisionMatrix[1] === END_STRING || decisionMatrix[1] === END_NUMBER) {\n        return `${randDecorator}${undecoratedString}${randDecorator.split('').reverse().join('')}`;\n      }\n\n      // <DEC> string\n      return `${randDecorator}${undecoratedString}`;\n    }\n\n    // string <DEC>\n    if (decisionMatrix[1] === END_STRING) {\n      return `${undecoratedString}${Decorator.getDecorator().split('').reverse().join('')}`;\n    }\n\n    // string <NUM>\n    if (decisionMatrix[1] === END_NUMBER) {\n      return `${undecoratedString}${Math.floor(Math.random() * 1000)}`;\n    }\n\n    // plain string\n    return undecoratedString;\n  }\n\n  private static getDecorator(): string {\n    return this.startDecorators[Math.floor(Math.random() * Decorator.startDecorators.length)];\n  }\n}\n","import { Decorator } from \"../model/Decorator\";\nimport { GrammarObject } from \"../model/GrammarObject\";\n\nexport class StreamFormatter {\n  public constructor(private readonly stream: GrammarObject[]) {}\n\n  public toDecoratedString(): string {\n    return Decorator.decorateString(this.toUndecoratedString());\n  }\n\n  public toUndecoratedString(): string {\n    return this.stream\n      .reduce(\n        (prev: string, current: GrammarObject) => `${prev} ${current.value}`,\n        \"\"\n      )\n      .trim();\n  }\n}\n","import React, { useState } from \"react\";\nimport { stylesheet } from \"typestyle\";\nimport { GrammarStream } from \"./domain/service/GrammarStream\";\nimport { StreamFormatter } from \"./domain/service/StreamFormatter\";\n\nexport const Generator: React.FC = () => {\n  const [userName, setUserName] = useState<string>(\"\");\n\n  return (\n    <form className={styles.form}>\n      <label style={{ display: \"none\" }} htmlFor=\"userName\">\n        Generated Value:\n      </label>\n\n      <input\n        className={styles.formUsername}\n        id=\"userName\"\n        placeholder=\"Generated result...\"\n        readOnly\n        value={userName}\n      />\n\n      <button\n        className={styles.formSubmit}\n        onClick={(e) => {\n          e.preventDefault();\n          const stream = new GrammarStream();\n          const streamFormatter = new StreamFormatter(stream.value);\n          setUserName(streamFormatter.toDecoratedString());\n        }}\n        type=\"submit\"\n      >\n        Generate\n      </button>\n    </form>\n  );\n};\n\nconst styles = stylesheet({\n  form: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    maxWidth: \"900px\",\n    padding: \"10px\",\n    textAlign: \"center\",\n    width: \"100%\",\n  },\n\n  formUsername: {\n    border: \"none\",\n    borderRadius: \"4px\",\n    display: \"block\",\n    fontFamily: \"Lora, serif\",\n    lineHeight: \"40px\",\n    margin: \"0 auto\",\n    padding: \"0 10px\",\n    textAlign: \"center\",\n    width: \"100%\",\n  },\n\n  formSubmit: {\n    backgroundColor: \"#5c00ff\",\n    borderRadius: \"4px\",\n    borderStyle: \"none\",\n    color: \"white\",\n    cursor: \"pointer\",\n    fontFamily: \"Lora, serif\",\n    fontSize: \"20px\",\n    fontWeight: \"bold\",\n    letterSpacing: \"3px\",\n    lineHeight: \"50px\",\n    marginTop: \"10px\",\n    maxWidth: \"900px\",\n    transition: \"all .2s\",\n    width: \"100%\",\n    $nest: {\n      \"&:active, &:hover\": {\n        backgroundColor: \"#2b0076\",\n      },\n    },\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { stylesheet } from \"typestyle\";\nimport { Generator } from \"./Generator\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst styles = stylesheet({\n  pageHead: {\n    alignItems: \"center\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    textAlign: \"center\",\n  },\n\n  pageContent: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    marginTop: \"20px\",\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <>\n      <header className={styles.pageHead}>\n        <h1>Gotherator</h1>\n      </header>\n\n      <main className={styles.pageContent}>\n        <Generator />\n      </main>\n    </>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}